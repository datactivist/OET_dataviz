---
title: "Progress of the MapYourGrid project"
format: 
  dashboard:
    nav-buttons: [github]
    github: https://github.com/datactivist/OET_dataviz
logo: "https://raw.githubusercontent.com/open-energy-transition/MapYourGrid/main/docs/images/logos/MapYourGrid-logo.png"
theme: [sandstone, custom.scss]
fig-width: 10
fig-asp: 0.3
server: shiny
resources: 
  - "leaflet.providers"
---

```{r}
#| label: chargement des packages et thème graphs
#| context: setup
#| message: false

library(tidyverse)
library(jsonlite)
library(plotly)
library(scales)
library(gt)
library(gtExtras)
library(janitor)
library(sf)
library(leaflet)
library(leafem)
library(leaflet.extras2)
library(shiny)
library(rvest)
library(glue)
library(DT)
library(bslib)
library(bsicons)

#Thème pour les graphiques
theme_custom <- function (){
    ggplot2::theme(plot.title = ggplot2::element_text(size = 21, face = "bold", color = "#222222"), 
        plot.subtitle = ggplot2::element_text(size = 18, face = "italic", margin = ggplot2::margin(0, 0, 9, 0)), 
        plot.caption = ggplot2::element_text(size = 18, margin = ggplot2::margin(9, 0, 9, 0)), 
        plot.title.position = "plot",
        plot.caption.position = "plot",
        legend.title = ggplot2::element_text( size = 18, color = "#222222"), 
        legend.position = "top", 
        legend.text.align = 0, 
        legend.background = ggplot2::element_blank(),
        legend.key = ggplot2::element_blank(),
        legend.text = ggplot2::element_text(size = 18,color = "#222222"), 
        axis.text = ggplot2::element_text(size = 12,color = "#222222"), 
        axis.text.x = ggplot2::element_text(margin = ggplot2::margin(5,b = 10)), 
        axis.title = ggplot2::element_text(size = 15,color = "#222222"),
        axis.ticks = ggplot2::element_blank(),
        axis.line = ggplot2::element_blank(), 
        panel.grid.minor = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "#cbcbcb"),
        panel.grid.major.x = ggplot2::element_blank(), 
        panel.background = ggplot2::element_blank(),
        strip.background = ggplot2::element_rect(fill = "white"),
        strip.text = ggplot2::element_text(size = 22, hjust = 0, face = "bold"),
        text = element_text(family = "Open Sans"))
}
```

```{r}
#| label: import data world to get last update

df_line <- read_csv("./data/api/data_line_all.csv")
last_date <- df_line |> 
  arrange(t) |> 
  slice_tail(n = 1)
```



# Indicators


::: {.sidebar}


The data displayed on this dashboard was last updated on **`r format(as.Date(last_date$t, format = "%Y-%m-%dT%H:%M:%S"),"%Y-%m-%dT%H:%M:%S")`**.

Transmission assets over **50 kV**.

------------------------------------------------------------------------


Select a country to view its indicators. By default, **global indicators** are shown.

```{r}
#| label: scraping table wiki relations / pays

# Bouton de sélection du pays
selectInput('nom_pays', 'Country', unique(df_line$Pays), selected = "World (default)")
```

:::

## Column

```{r}
#| context: server
#| label: get data and stats from selected country

# Line
value_world_line <- reactive({
  df_line <- read_csv("./data/api/data_line_all.csv")
  df_line |> 
    select(-c(length, amount)) |> 
    rename(length = labels.transmission.length,
           amount = labels.transmission.amount) |> #on prend désormais les comptes *transmission*
    filter(Pays == input$nom_pays)
})
  #length
value_world_line_last <- reactive({
  value_world_line() |> 
    arrange(t) |> 
    slice_tail(n = 1) |> 
    mutate(length = ifelse(length > 1000000000,
                           paste(format(round(as.numeric(length) / 1e6, 0), trim = TRUE), "M"),
                           format(as.integer(length, 0), nsmall = 1, big.mark = ",")))
})
  #segments
value_world_segments_last <- reactive({
  value_world_line() |> 
    arrange(t) |> 
    slice_tail(n = 1) |> 
    mutate(amount = ifelse(amount > 1000000000,
                           paste(format(round(as.numeric(amount) / 1e6, 0), trim = TRUE), "M"),
                           format(as.integer(amount, 0), nsmall = 1, big.mark = ",")))
})
# Substations
value_world_substations <- reactive({
  df_substations <- read_csv("./data/api/data_substations_all.csv")
  df_substations |> 
    select(-amount) |> 
    rename(amount = labels.transmission.amount) |> #on prend désormais les comptes *transmission*
    filter(Pays == input$nom_pays)
})
value_world_substations_last <- reactive({
  value_world_substations() |> 
    arrange(t) |> 
    slice_tail(n = 1) |> 
    mutate(amount = ifelse(amount > 1000000000,
                           paste(format(round(as.numeric(amount) / 1e6, 0), trim = TRUE), "M"),
                           format(as.integer(amount, 0), nsmall = 1, big.mark = ",")))
})
# Pylons (supports)
value_world_supports <- reactive({
  df_supports <- read_csv("./data/api/data_supports_all.csv")
  df_supports |> 
    filter(Pays == input$nom_pays)
})
value_world_supports_last <- reactive({
  value_world_supports() |> 
    arrange(t) |> 
    slice_tail(n = 1) |> 
    mutate(amount = ifelse(amount > 1000000000,
                           paste(format(round(as.numeric(amount) / 1e6, 0), trim = TRUE), "M"),
                           format(as.integer(amount, 0), nsmall = 1, big.mark = ",")))
})
```


### Row {height="20%"}


```{r}
value_box(
  id = "card1",
  title = "Line lenght (km)",
  theme = value_box_theme(bg = "#4e98a1", fg = "white"),
  value = textOutput("n1")
)
```

```{r}
value_box(
  id = "card2",
  title = "Number of segments",
  theme = value_box_theme(bg = "#f1d365", fg = "#4f4e4d"),
  value = textOutput("n2")
)
```

```{r}
value_box(
  id = "card3",
  title = "Number of substations",
  theme = value_box_theme(bg = "#4ea181", fg = "white"),
  value = textOutput("n3")
)
```

```{r}
value_box(
  id = "card4",
  title = "Number of pylons",
  theme = value_box_theme(bg = "#985750", fg = "white"),
  value = textOutput("n4")
)
```

```{r}
#| context: server

output$n1 <- renderText({
  value_world_line_last()$length
})
output$n2 <- renderText({
  value_world_segments_last()$amount
})
output$n3 <- renderText({
  value_world_substations_last()$amount
})
output$n4 <- renderText({
  value_world_supports_last()$amount
})
```


### Row {height="80%"}

#### Column {width="30%" .tabset}


```{r}
#| title: Line length
plotlyOutput('plot1')
```

```{r}
#| context: server

# Plot line length
output$plot1 <- renderPlotly({
  #plot depending on selected country
  graph <- value_world_line() |> 
    mutate(t = as.Date(t),
           length = length / 1000) |> 
    ggplot() +
    geom_line(aes(x = t, y = length, group = 1,
                  text = paste0("Time : ", t, "\nLine lenght : ", format(as.integer(length, 0), nsmall = 1, big.mark = ","), "m km")),
              color = "#036D7A", size = .7) +
    geom_point(aes(x = t, y = length, group = 1,
                  text = paste0("Time : ", t, "\nLine lenght : ", format(as.integer(length, 0), nsmall = 1, big.mark = ","), "m km")),
              color = "#036D7A", size = 1) +
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    scale_y_continuous(labels = scales::comma) +
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    labs(x = "Time", 
         y = "Line lenght (m km)") +
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
  #interactive graph
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max(as.numeric(value_world_line()$length)/1000, na.rm = TRUE),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```


```{r}
#| title: segments
plotlyOutput('plot2')
```

```{r}
#| context: server

# Plot line length
output$plot2 <- renderPlotly({
  #plot depending on selected country
  graph <- value_world_line() |> 
    mutate(t = as.Date(t)) |> 
    ggplot() +
    geom_line(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of segments : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#ECC229", size = .7) +
    geom_point(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of segments : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#ECC229", size = 1) +
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    scale_y_continuous(labels = scales::comma) +
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    labs(x = "Time", 
         y = "Segments (nb.)") +
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
  #interactive graph
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max(value_world_line()$amount, na.rm = TRUE),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```


```{r}
#| title: substations
plotlyOutput('plot3')
```

```{r}
#| context: server

# Plot line length
output$plot3 <- renderPlotly({
  graph <- value_world_substations() |> 
    mutate(t = as.Date(t)) |> 
  #plot depending on selected country
    ggplot() +
    geom_line(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of substations : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#037a4c", size = .7) +
    geom_point(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of substations : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#037a4c", size = 1) +
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    scale_y_continuous(labels = scales::comma) +
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    labs(x = "Time", 
         y = "Number of substations") +
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
  #interactive graph
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max(as.numeric(value_world_substations()$amount), na.rm = TRUE),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```


```{r}
#| title: Pylons
plotlyOutput('plot4')
```

```{r}
#| context: server

# Plot line length
output$plot4 <- renderPlotly({
  #plot depending on selected country
  graph <- value_world_supports() |> 
    mutate(t = as.Date(t)) |> 
    ggplot() +
    geom_line(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of pylons : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#985750", size = .7) +
    geom_point(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of pylons : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#985750", size = 1) +
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    scale_y_continuous(labels = scales::comma) +
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    labs(x = "Time", 
         y = "Number of pylons") +
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max(as.numeric(value_world_supports()$amount), na.rm = TRUE),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```



#### Column {width="45%"}

```{r}
#| context: server
#| label: prepare data evolution 100 graph

# Préparation des données
segments_mars25 <- reactive({
  value_world_line() |> 
    filter(as.Date(t) == "2025-03-01")
})
len_mars25 <- reactive({
  value_world_line() |> 
    filter(as.Date(t) == "2025-03-01")
})
substations_mars25 <- reactive({
  value_world_substations() |> 
    filter(as.Date(t) == "2025-03-01")
})
pylons_mars25 <- reactive({
  value_world_supports() |> 
    filter(as.Date(t) == "2025-03-01")
})
table <- reactive({
  left_join(value_world_line() |> rename(nb_segments = amount), 
            value_world_substations() |> rename(nb_substations = amount) |> select(-length), 
            by = "t") |> 
  left_join(value_world_supports() |> rename(nb_pylons = amount) |> select(-length),
            by = "t") |> 
  arrange(t) |> 
  # transformation des métriques en base 100 en mars 2025
  mutate(nb_segments_100_mars25 = nb_segments / segments_mars25()$amount * 100,
         nb_segments_100_diff = round(nb_segments_100_mars25 - 100, 1),
         nb_segments_diff = nb_segments - segments_mars25()$amount,
         len_100_mars25 = length / len_mars25()$length * 100,
         len_100_diff = round(len_100_mars25 - 100, 1),
         len_diff = round(length - len_mars25()$length, 0),
         nb_substations_100_mars25 = nb_substations / substations_mars25()$amount * 100,
         nb_substations_100_diff = round(nb_substations_100_mars25 - 100, 1),
         nb_substations_diff = nb_substations - substations_mars25()$amount,
         nb_pylons_100_mars25 = nb_pylons / pylons_mars25()$amount * 100,
         nb_pylons_100_diff = round(nb_pylons_100_mars25 - 100, 1),
         nb_pylons_diff = nb_pylons - pylons_mars25()$amount)
})
  #calcul de la valeur maximale en base 100 (pour placer "Start of MYG project")
max_mesures <- reactive({
  c(max(table()$len_100_mars25, na.rm = TRUE),
    max(table()$nb_segments_100_mars25, na.rm = TRUE),
    max(table()$nb_substations_100_mars25, na.rm = TRUE),
    max(table()$nb_pylons_100_mars25, na.rm = TRUE))
})
max_max_100 <- reactive({
  max(max_mesures())
})
```


```{r}
#| title: Evolutions base 100 in March 2025
plotlyOutput('plot5')
```

```{r}
#| context: server

# Plot line length
output$plot5 <- renderPlotly({

  #plot depending on selected country
  graph <- table() |> 
    mutate(t = as.Date(t)) |> 
    ggplot() +
    #ligne colorée jusqu'à 100 pour line lenght
    geom_line(aes(x = t, y = len_100_mars25,group = 1,
                  text = case_when(len_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(len_100_diff), "% (", 
                                                             format(as.integer(len_diff, 0), nsmall = 1, big.mark = ","), 
                                                             " km line lenght)"),
                                   len_100_diff == 0 ~ "Base 100",
                                   .default = paste0("Time : ", t, "\n↑ ", abs(len_100_diff), "% (+", 
                                                             format(as.integer(len_diff, 0), nsmall = 1, big.mark = ","), 
                                                             " km line lenght)")),
                  color = "Line lenght"), size = .7) +
    #ligne colorée jusqu'à 100 pour nb of segments
    geom_line(aes(x = t, y = nb_segments_100_mars25, group = 1, 
                  text = case_when(nb_segments_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(nb_segments_100_diff), 
                                                                "% (", nb_segments_diff, " segments)"),
                                   nb_segments_100_diff == 0 ~ "Base 100",
                                   .default = paste0("Time : ", t, "\n↑ ", abs(nb_segments_100_diff), 
                                                                "% (+", nb_segments_diff, " segments)")),
                  color = "Segments"), size = .7) +
    #ligne colorée jusqu'à 100 pour nb of substations
    geom_line(aes(x = t, y = nb_substations_100_mars25, group = 1, 
                  text = case_when(nb_substations_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(nb_substations_100_diff), 
                                                                "% (", nb_substations_diff, " substations)"),
                                   nb_substations_100_diff == 0 ~ "Base 100",
                                   .default = paste0("Time : ", t, "\n↑ ", abs(nb_substations_100_diff), 
                                                                "% (+", nb_substations_diff, " substations)")),
                  color = "Substations"), size = .7) +
    #ligne colorée jusqu'à 100 pour nb of pylons
    geom_line(aes(x = t, y = nb_pylons_100_mars25, group = 1, 
                  text = case_when(nb_pylons_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(nb_pylons_100_diff), 
                                                                "% (", nb_pylons_diff, " pylons)"),
                                   nb_pylons_100_diff == 0 ~ "Base 100",
                                   .default = paste0("Time : ", t, "\n↑ ", abs(nb_pylons_100_diff), 
                                                                "% (+", nb_pylons_diff, " pylons)")),
                  color = "Pylons"), size = .7) +
    #ligne pointillée au 1er mars 2025
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    #mises en forme générales
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    scale_y_continuous(labels = scales::comma) +
    scale_color_manual(values = c("Segments" = "#ecc123", 
                                  "Line lenght" = "#036d7a",
                                  "Substations" = "#037a4c",
                                  "Pylons" = "#6d0f06")) +
    labs(x = "Time", 
         y = "Base 100 in 03-2025", 
         color = "") + #title = "<span style='color: #037A4C;'>Line lenght</span> and <span style='color: #ECC229;'>number of segments</span> base 100 in March 2025 - Colombia"
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          legend.position = "top",
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb")) +
    guides(color = guide_legend(nrow = 2))
  #interactive graph
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(legend = list(reverse = TRUE),
           annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max_max_100(),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```


#### Column {width="25%"}


```{r}
#| context: server
#| label: prepare data growth rate graph

# Préparation des données
  #line
growth_rate <- reactive({bind_cols(
  value_world_line() |> 
    mutate(t = as.Date(t),
           length = as.numeric(length)) |> 
    filter(t == "2025-03-01" | t == max(t, na.rm = TRUE)) |> 
    mutate(growth_rate_amount = (amount - lag(amount)) / lag(amount),
           growth_rate_length = (length - lag(length)) / lag(length)) |> 
    select(growth_rate_amount, growth_rate_length) |> 
    na.omit(),
    #substations
  value_world_substations() |> 
    mutate(t = as.Date(t)) |> 
    filter(t == "2025-03-01" | t == max(t, na.rm = TRUE)) |> 
    mutate(growth_rate_substation = (amount - lag(amount)) / lag(amount)) |> 
    select(growth_rate_substation) |> 
    na.omit(),
    # pylons
  value_world_supports() |> 
    mutate(t = as.Date(t)) |> 
    filter(t == "2025-03-01" | t == max(t, na.rm = TRUE)) |> 
    mutate(growth_rate_supports = (amount - lag(amount)) / lag(amount)) |> 
    select(growth_rate_supports) |> 
    na.omit()
  ) |> 
  pivot_longer(cols = everything(), values_to = "Valeur", names_to = "Mesure", names_prefix = "growth_rate_") |> 
  mutate(Mesure = str_replace_all(Mesure, c("amount" = "Segments",
                                            "length" = "Line length",
                                            "substation" = "Substations",
                                            "supports" = "Pylons")))
})
```

```{r}
#| title: Growth rate since March 2025
plotlyOutput('plot6')
```

```{r}
#| context: server

# Plot line length
output$plot6 <- renderPlotly({

  #plot depending on selected country
  graph <- growth_rate() |> 
    mutate(Mesure = factor(Mesure, levels = c("Pylons", "Substations", "Segments", "Line length"))) |> 
    ggplot() +
    geom_segment(aes(x = 0, xend = Valeur, y = Mesure, yend = Mesure, color = Mesure), size = 1) +
    geom_point(aes(x = Valeur, y = Mesure, color = Mesure,
                   text = paste("+", round(Valeur*100, 2), "%")), size = 4) +
    labs(y = "", x = "Growth rate (%)") +
    scale_color_manual(values = c("Segments" = "#ecc123",
                                  "Line length" = "#036d7a",
                                  "Substations" = "#037a4c",
                                  "Pylons" = "#6d0f06")) +
    scale_x_continuous(labels = scales::percent) +
    theme_custom() +
    theme(legend.position = "none", 
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.major.y = ggplot2::element_blank()) 
  #interactive graph
  viz <- ggplotly(graph, tooltip = c("text"))
  viz
})
```


# Tables

```{r}
#| label: import data tables

line_lenght_country <- read_csv("./data/api/line_length_growth_table.csv")
```

## Row

### Column {width="60%"}

```{r}
#| title: Line length growth per country

# Préparation des données

  #chargement du dataset countrypops (codes des pays)
data("countrypops")
countrypops <- countrypops |> 
  distinct(country_name, country_code_2, country_code_3) |> 
  mutate(country_name = tolower(str_replace(country_name, "&", "and"))) 

  #jointure avec nos données pour récupérer le code de pays 
laste_date <- (line_lenght_country |> distinct(t))$t
line_lenght_country_prep0 <- line_lenght_country |> 
  select(Country, length, growth_percent, growth_km) |> 
  mutate(Country2 = tolower(Country), #minuscules pour otpimiser le match
         Country2 = case_match(Country2, #remplace à la main des pays non matchés
                               "people's republic of china" ~ "china",
                               "ivory coast" ~ "cote d'ivoire",
                               "state of palestine" ~ "palestine",
                               "democratic republic of the congo" ~ "congo (drc)",
                               "republic of the congo" ~ "congo (republic)",
                               "the bahamas" ~ "bahamas",
                               "the gambia" ~ "gambia",
                               "timor-leste" ~ "east timor",
                               "federated states of micronesia" ~ "micronesia",
                               "são tomé and príncipe" ~ "sao tome and principe",
                               "kingdom of the netherlands" ~ "netherlands",
                               "united states of america" ~ "united states",
                               "republic of ireland" ~ "ireland",
                               #"taiwan" ~ "united states",
                               .default = Country2)) |> 
  left_join(countrypops, by = c("Country2" = "country_name")) |> 
  #mise en forme df
  select(-Country2) |> 
  relocate(country_code_2, .before = Country) |> 
  relocate(length, .after = Country) |> 
  mutate(length = round(length, 0),
         growth_km = round(growth_km, 0)) |> 
  rename(` ` = country_code_2)
line_lenght_country_prep <- line_lenght_country_prep0 |> 
  rename(`Growth since 2025-01-01 (km)` = growth_km,
         `Growth since 2025-01-01 (%)` = growth_percent) |> 
  rename_with(~ paste("Power line length (km)", laste_date), .cols = length)
         

# Affichage de la table
table_line_country <- line_lenght_country_prep |> 
  arrange(Country) |> 
  gt() |> 
  #drapeaux par pays
  fmt_flag(columns = ` `) |> 
  #format colonne en %
  fmt_percent(columns = `Growth since 2025-01-01 (%)`,
            decimals = 1, drop_trailing_zeros = TRUE,
            dec_mark = ",") |> 
  #coloration des évolutions en %
  data_color(columns = `Growth since 2025-01-01 (%)`,
             rows = `Growth since 2025-01-01 (%)` != 0,
             method = "bin",
             apply_to = "text",
             palette = c("#bf2f2f", "black", "#279f2b"),
             bins = c(-1, 0, 1)) |> 
  #coloration des évolutions en valeurs absolues
  data_color(columns = `Growth since 2025-01-01 (km)`,
             rows = `Growth since 2025-01-01 (km)` > 0,
             method = "numeric",
             palette = c("#FECF5D", "#279f2b"),
             bins = c(-Inf, 0, Inf),
             alpha = .8) |>
  data_color(columns = `Growth since 2025-01-01 (km)`,
             rows = `Growth since 2025-01-01 (km)` < 0,
             method = "numeric",
             palette = c("#bf2f2f", "#ffa500"),
             bins = c(-Inf, 0, Inf),
             alpha = .8) |>
  data_color(columns = `Growth since 2025-01-01 (km)`,
             rows = `Growth since 2025-01-01 (km)` == 0,
             method = "numeric",
             palette = c("grey80"),
             bins = c(-Inf, 0, Inf),
             alpha = .8) |>
  #alternance gris / blanc par ligne
  opt_row_striping() |> 
  #centrer les nombres
  tab_style(style = cell_text(align = "center"),
            locations = cells_body(is.numeric)) |> 
  #noms de pays en gras
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(Country)) |> 
  #mise en forme des noms de colonnes
  tab_style(style = cell_text(align = "left"),
            locations = cells_column_labels()) |> 
  #bordures en blanc
  tab_options(table_body.hlines.style = "solid",
              table_body.hlines.width = 10, 
              table_body.hlines.color = "white") |> 
  #taille colonnes
  cols_width(` ` ~ px(30)) |> 
  #intéractivité table
  opt_interactive(use_pagination = FALSE, use_search = TRUE) |> 
  #cache colonne
  cols_hide(country_code_3)
table_line_country
```

### Column {width="40%"}

#### Row {height="60%" .tabset}

```{r}
#| label: pre-run tables per continent
# Préparation des données

  #chargement des données des pays avec continent correspondant
continent_data <- read_delim("https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/world-administrative-boundaries/exports/csv/?delimiters=%3B&lang=fr&timezone=Europe%2FParis&use_labels=true", ";") |> 
  distinct(`ISO 3 territory code`, `Continent of the territory`) |> 
  clean_names()

  #jointure avec nos données pour récupérer le code de pays 
line_lenght_country_prep2 <- line_lenght_country_prep0 |> 
  mutate(country_code_3 = ifelse(Country == "Taiwan", "TWN", country_code_3)) |> 
  left_join(continent_data, by = c("country_code_3" = "iso_3_territory_code")) |> 
    #agrégation par continent
  summarise(nb_pays = n(),
            mean_power_line = round(mean(length), 0),
            min_power_line = min(length),
            max_power_line = max(length),
            sum_power_line = sum(length),
            min_growth_percent = min(growth_percent),
            max_growth_percent = max(growth_percent),
            mean_growth_percent = mean(growth_percent),
            min_growth_km = min(growth_km),
            max_growth_km = max(growth_km),
            mean_growth_km = mean(growth_km),
            sum_growth_km = sum(growth_km),
            .by = continent_of_the_territory) |> 
      #mise en forme des stats
  mutate(across(where(is.numeric) & !all_of(c("mean_power_line", "mean_growth_percent", 
                                              "mean_growth_km", "min_growth_percent", "max_growth_percent")), 
                ~ format(as.integer(., 0), nsmall = 1, big.mark = ",")))

```

```{r}
#| title: Power line length
      ###----- Power line length (km)

# Affichage de la table
table_line_continent_power <- line_lenght_country_prep2 |> 
  #sélection des variables à afficher
  select(continent_of_the_territory, nb_pays, ends_with("power_line")) |> 
  #dernière mise en forme avant table
  rename(`Number of countries` = nb_pays,
         Continent = continent_of_the_territory) |> 
  #table
  gt() |> 
  #coloration des moyennes
  data_color(columns = mean_power_line,
             colors = scales::col_numeric(palette = c("#b3d3d7", "#036d7a"), domain = NULL)) |> 
  #groupe de statistiques
  tab_spanner(label = paste("Power line length (km)", laste_date),
              columns = c(mean_power_line, min_power_line, max_power_line, sum_power_line)) |> 
  cols_label(sum_power_line = "Sum", min_power_line = "Min", 
             max_power_line = "Max", mean_power_line = "Mean") |> 
  #alternance gris / blanc par ligne
  opt_row_striping() |> 
  #centrer les nombres
  tab_style(style = cell_text(align = "center"),
            locations = cells_body(-Continent)) |> 
  #lighter les nombres sauf nb_countries
  tab_style(style = cell_text(weight = "lighter"),
            locations = cells_body(-c(Continent, `Number of countries`))) |> 
  #noms de continent en gras
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(Continent)) |> 
  #mise en forme des noms de colonnes
  tab_style(style = list(cell_text(align = "center")),
            locations = cells_column_labels()) |> 
  #styles de la table
  opt_stylize(style = 1, color = 'gray') |> 
  #bordures en blanc
  tab_options(table_body.hlines.style = "solid",
              table_body.hlines.width = 2, 
              table_body.hlines.color = "white",
              table_body.border.top.color = "#6b6b6b",
              table_body.border.top.style = "solid",
              table_body.border.top.width = 2.4)
table_line_continent_power
```

```{r}
#| title: Line length growth (%)
      ###----- Growth since 2025-01-01 (%)

# Affichage de la table
table_line_continent_growth_percent <- line_lenght_country_prep2 |> 
  #sélection des variables à afficher
  select(continent_of_the_territory, nb_pays, ends_with("growth_percent")) |> 
  #dernière mise en forme avant table
  rename(`Number of countries` = nb_pays,
         Continent = continent_of_the_territory) |> 
  #table
  gt() |> 
  #coloration des moyennes
  data_color(columns = mean_growth_percent,
             colors = scales::col_numeric(palette = c("#b3d3d7", "#036d7a"), domain = NULL)) |> 
  #groupe de statistiques
  tab_spanner(label = 'Growth since 2025-01-01 (%)',
              columns = c(mean_growth_percent, min_growth_percent, max_growth_percent)) |> 
  cols_label(min_growth_percent = "Min", max_growth_percent = "Max", mean_growth_percent = "Mean") |> 
    #alternance gris / blanc par ligne
  opt_row_striping() |> 
  #centrer les nombres
  tab_style(style = cell_text(align = "center"),
            locations = cells_body(-Continent)) |> 
  #lighter les nombres sauf nb_countries
  tab_style(style = cell_text(weight = "lighter"),
            locations = cells_body(-c(Continent, `Number of countries`))) |> 
  #noms de continent en gras
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(Continent)) |> 
  #mise en forme des noms de colonnes
  tab_style(style = list(cell_text(align = "center")),
            locations = cells_column_labels()) |> 
  #styles de la table
  opt_stylize(style = 1, color = 'gray') |> 
  #bordures en blanc
  tab_options(table_body.hlines.style = "solid",
              table_body.hlines.width = 2, 
              table_body.hlines.color = "white",
              table_body.border.top.color = "#6b6b6b",
              table_body.border.top.style = "solid",
              table_body.border.top.width = 2.4) |> 
  #format colonne en %
  fmt_percent(columns = c(min_growth_percent, max_growth_percent, mean_growth_percent),
            decimals = 2, drop_trailing_zeros = TRUE,
            dec_mark = ",")
table_line_continent_growth_percent
```

```{r}
#| title: Line length growth (km)
      ###----- Growth since 2025-01-01 (km)

# Affichage de la table
table_line_continent_growth_km <- line_lenght_country_prep2 |> 
  #sélection des variables à afficher
  select(continent_of_the_territory, nb_pays, ends_with("growth_km")) |> 
  #dernière mise en forme avant table
  rename(`Number of countries` = nb_pays,
         Continent = continent_of_the_territory) |> 
  mutate(mean_growth_km = round(mean_growth_km, 0)) |> 
  #table
  gt() |> 
  #coloration des moyennes
  data_color(columns = mean_growth_km,
             colors = scales::col_numeric(palette = c("#b3d3d7", "#036d7a"), domain = NULL)) |> 
  #groupe de statistiques
  tab_spanner(label = 'Growth since 2025-01-01 (km)',
              columns = c(mean_growth_km, min_growth_km, max_growth_km, sum_growth_km)) |> 
  cols_label(min_growth_km = "Min", max_growth_km = "Max", mean_growth_km = "Mean", sum_growth_km = "Sum") |> 
    #alternance gris / blanc par ligne
  opt_row_striping() |> 
  #centrer les nombres
  tab_style(style = cell_text(align = "center"),
            locations = cells_body(-Continent)) |> 
  #lighter les nombres sauf nb_countries
  tab_style(style = cell_text(weight = "lighter"),
            locations = cells_body(-c(Continent, `Number of countries`))) |> 
  #noms de continent en gras
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(Continent)) |> 
  #mise en forme des noms de colonnes
  tab_style(style = list(cell_text(align = "center")),
            locations = cells_column_labels()) |> 
  #styles de la table
  opt_stylize(style = 1, color = 'gray') |> 
  #bordures en blanc
  tab_options(table_body.hlines.style = "solid",
              table_body.hlines.width = 2, 
              table_body.hlines.color = "white",
              table_body.border.top.color = "#6b6b6b",
              table_body.border.top.style = "solid",
              table_body.border.top.width = 2.4)
table_line_continent_growth_km
```

#### Row {height="40%"}


```{r}
#| title: Total line length's per continent


data_graph <- line_lenght_country_prep0 |> 
  mutate(country_code_3 = ifelse(Country == "Taiwan", "TWN", country_code_3)) |> 
  left_join(continent_data, by = c("country_code_3" = "iso_3_territory_code")) |> 
    #agrégation par continent
  summarise(sum_power_line = sum(length),
            .by = continent_of_the_territory) |> 
  mutate(continent_of_the_territory = fct_reorder(continent_of_the_territory, sum_power_line))
graph <- data_graph |> 
  ggplot() +
  geom_col(aes(x = continent_of_the_territory, y = max(sum_power_line)), fill = "#F3F3F3", width = .85) +
  geom_col(aes(x = continent_of_the_territory, y = sum_power_line,
               text = paste(format(as.integer(sum_power_line, 0), nsmall = 1, big.mark = ","), "km")), 
           fill = "#4e98a1", width = .85) +
  scale_y_continuous(labels = scales::comma) + 
  coord_flip() +
  labs(y = "Line length (km)") +
  theme_custom() +
  theme(panel.grid.major.x = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_blank(),
        axis.title.y = element_blank())
ggplotly(graph, tooltip = c("text"))
```



# Indicator map


<iframe src="https://apps.dynartio.com/mapyourgrid/indicatormap.html"
        style="width:100%; height:100%; border:0;"></iframe>


# Power grid map

```{r}
#| label: import data geojson Colombia

colombia_jan <- st_read("./data/colombia_230_20250101.geojson", quiet = TRUE)
colombia_oct <- st_read("./data/colombia_230_20251013.geojson", quiet = TRUE)
```


```{r}
#| title: Map of power grid of Colombia

leaflet() |>
  addMapPane("left", zIndex = 0) %>%
  addMapPane("right", zIndex = 0) %>%
  addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) |> #"CartoDB.Positron"
  addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) |> 
  addPolylines(
    data = colombia_jan,
    color = "#036d7a", weight = 1.2, opacity = 1,
    group = "January 2025", options = leafletOptions(pane = "right")
  ) |>
  addPolylines(
    data = colombia_oct,
    color = "#6d0f06", weight = 1.2, opacity = 1,
    group = "October 2025", options = leafletOptions(pane = "left")
  ) |>
  addLayersControl(overlayGroups = c("January 2025", "October 2025")) |>  
  addSidebyside(
    layerId = "sidecontrols",
    leftId = "baseid1",
    rightId = "baseid2"
  ) |> 
  addLegend(
    position = "topleft",
    colors = "#036d7a",
    labels = "January 2025",
    opacity = 1
  ) |> 
  addLegend(
    position = "topright",
    colors = "#6d0f06",
    labels = "October 2025",
  opacity = 1
  )
```



