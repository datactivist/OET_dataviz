---
title: "Progress of the MapYourGrid project"
format: 
  dashboard:
    nav-buttons: [github]
    github: https://github.com/datactivist/OET_dataviz
logo: "https://raw.githubusercontent.com/open-energy-transition/MapYourGrid/main/docs/images/logos/MapYourGrid-logo.png"
theme: [sandstone, custom.scss]
fig-width: 10
fig-asp: 0.3
---

```{r}
#| label: chargement des packages et thème graphs
#| message: false

library(tidyverse)
library(jsonlite)
library(plotly)
library(scales)
library(gt)
library(gtExtras)
library(janitor)

#Thème pour les graphiques
theme_custom <- function (){
    ggplot2::theme(plot.title = ggplot2::element_text(size = 21, face = "bold", color = "#222222"), 
        plot.subtitle = ggplot2::element_text(size = 18, face = "italic", margin = ggplot2::margin(0, 0, 9, 0)), 
        plot.caption = ggplot2::element_text(size = 18, margin = ggplot2::margin(9, 0, 9, 0)), 
        plot.title.position = "plot",
        plot.caption.position = "plot",
        legend.title = ggplot2::element_text( size = 18, color = "#222222"), 
        legend.position = "top", 
        legend.text.align = 0, 
        legend.background = ggplot2::element_blank(),
        legend.key = ggplot2::element_blank(),
        legend.text = ggplot2::element_text( size = 18,color = "#222222"), 
        axis.text = ggplot2::element_text( size = 15,color = "#222222"), 
        axis.text.x = ggplot2::element_text(margin = ggplot2::margin(5,b = 10)), 
        axis.title = ggplot2::element_text( size = 18,color = "#222222"),
        axis.ticks = ggplot2::element_blank(),
        axis.line = ggplot2::element_blank(), 
        panel.grid.minor = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "#cbcbcb"),
        panel.grid.major.x = ggplot2::element_blank(), 
        panel.background = ggplot2::element_blank(),
        strip.background = ggplot2::element_rect(fill = "white"),
        strip.text = ggplot2::element_text(size = 22, hjust = 0, face = "bold"),
        text = element_text(family = "Open Sans"))
}
```

# World

```{r}
#| label: import data world
world_line <- fromJSON("https://mapyourgrid.infos-reseaux.com/projects/2025-01_lines/counts")$data |> 
  mutate(length = as.numeric(length))
world_substations <- fromJSON("https://mapyourgrid.infos-reseaux.com/projects/2025-01_substations/counts")$data
world_supports <- fromJSON("https://mapyourgrid.infos-reseaux.com/projects/2025-01_supports/counts")$data
```

```{r}
#| label: get world stats

# line length
value_world_line <- world_line |> 
  arrange(t) |> 
  filter(row_number() == nrow(world_line)) |> 
  mutate(length = format(round(as.numeric(length) / 1e6, 0), trim = TRUE))
# nb sections
value_world_sections <- world_line |> 
  arrange(t) |> 
  filter(row_number() == nrow(world_line)) |> 
  mutate(amount = format(as.integer(amount, 0), nsmall = 1, big.mark = ","))
# nb posts
value_world_substations <- world_substations |> 
  arrange(t) |> 
  filter(row_number() == nrow(world_substations)) |> 
  mutate(amount = format(as.integer(amount, 0), nsmall = 1, big.mark = ","))
# nb pylons
value_world_supports <- world_supports |> 
  arrange(t) |> 
  filter(row_number() == nrow(world_supports)) |> 
  mutate(amount = format(as.integer(amount, 0), nsmall = 1, big.mark = ","))
```

## Row {height="20%"}

```{r}
#| content: valuebox
#| title: "Line lenght (km)"

list(
  icon = "distribute-vertical",
  color = "primary",
  value = paste(value_world_line$length, "M")
)
```

```{r}
#| content: valuebox
#| title: "Number of sections"

list(
  icon = "sign-intersection-side",
  color = "secondary",
  value = value_world_sections$amount
)
```

```{r}
#| content: valuebox
#| title: "Number of posts"

list(
  icon = "box-seam",
  color = "success",
  value = value_world_substations$amount
)
```

```{r}
#| content: valuebox
#| title: "Number of pylons"

list(
  icon = "cone", #align-center
  color = "info",
  value = value_world_supports$amount
)
```

## Row {height="80%"}

### Column {width="30%" .tabset}


```{r}
#| title: Line length

graph <- world_line |> 
  mutate(t = as.Date(t),
         length = length / 100000) |> 
  ggplot() +
  geom_line(aes(x = t, y = length, group = 1,
                text = paste0("Time : ", t, "\nLine lenght : ", format(as.integer(length, 0), nsmall = 1, big.mark = ","), "M km")),
            color = "#036D7A", size = .7) +
  geom_point(aes(x = t, y = length, group = 1,
                text = paste0("Time : ", t, "\nLine lenght : ", format(as.integer(length, 0), nsmall = 1, big.mark = ","), "M km")),
            color = "#036D7A", size = 2) +
  geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
  scale_y_continuous(labels = scales::comma) +
  scale_x_date(date_labels = "%m-%Y", breaks = pretty_breaks(n = 10)) +
  labs(x = "Time", 
       y = "Line lenght (M km)") +
  theme_custom() +
  theme(axis.ticks.x = element_line(color = "#cbcbcb"),
        panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
        panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
viz <- ggplotly(graph, tooltip = c("text")) |> 
  layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                 y = max(as.numeric(world_line$length)/100000, na.rm = TRUE),
                                 text = "Start of the MYG<br>project",   
                                 xref = "x", yref = "y", showarrow = FALSE,
                                 font = list(color = "#8B0000"),
                                 align = "left", xanchor = "left", yanchor = "top")))
viz
```

```{r}
#| title: Sections

graph <- world_line |> 
  mutate(t = as.Date(t)) |> 
  ggplot() +
  geom_line(aes(x = t, y = amount, group = 1,
                text = paste0("Time : ", t, "\nNumber of sections : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
            color = "#ECC229", size = .7) +
  geom_point(aes(x = t, y = amount, group = 1,
                text = paste0("Time : ", t, "\nNumber of sections : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
            color = "#ECC229", size = 2) +
  geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
  scale_y_continuous(labels = scales::comma) +
  scale_x_date(date_labels = "%m-%Y", breaks = pretty_breaks(n = 10)) +
  labs(x = "Time", 
       y = "Sections (nb.)") +
  theme_custom() +
  theme(axis.ticks.x = element_line(color = "#cbcbcb"),
        panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
        panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
viz <- ggplotly(graph, tooltip = c("text")) |> 
  layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                 y = max(world_line$amount, na.rm = TRUE),
                                 text = "Start of the MYG<br>project",   
                                 xref = "x", yref = "y", showarrow = FALSE,
                                 font = list(color = "#8B0000"),
                                 align = "left", xanchor = "left", yanchor = "top")))
viz
```

```{r}
#| title: Posts

graph <- world_substations |> 
  mutate(t = as.Date(t)) |> 
  ggplot() +
  geom_line(aes(x = t, y = amount, group = 1,
                text = paste0("Time : ", t, "\nNumber of posts : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
            color = "#037a4c", size = .7) +
  geom_point(aes(x = t, y = amount, group = 1,
                text = paste0("Time : ", t, "\nNumber of posts : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
            color = "#037a4c", size = 2) +
  geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
  scale_y_continuous(labels = scales::comma) +
  scale_x_date(date_labels = "%m-%Y", breaks = pretty_breaks(n = 10)) +
  labs(x = "Time", 
       y = "Number of posts") +
  theme_custom() +
  theme(axis.ticks.x = element_line(color = "#cbcbcb"),
        panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
        panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
viz <- ggplotly(graph, tooltip = c("text")) |> 
  layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                 y = max(as.numeric(world_substations$amount), na.rm = TRUE),
                                 text = "Start of the MYG<br>project",   
                                 xref = "x", yref = "y", showarrow = FALSE,
                                 font = list(color = "#8B0000"),
                                 align = "left", xanchor = "left", yanchor = "top")))
viz
```

```{r}
#| title: Pylons

graph <- world_supports |> 
  mutate(t = as.Date(t)) |> 
  ggplot() +
  geom_line(aes(x = t, y = amount, group = 1,
                text = paste0("Time : ", t, "\nNumber of pylons : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
            color = "#985750", size = .7) +
  geom_point(aes(x = t, y = amount, group = 1,
                text = paste0("Time : ", t, "\nNumber of pylons : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
            color = "#985750", size = 2) +
  geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
  scale_y_continuous(labels = scales::comma) +
  scale_x_date(date_labels = "%m-%Y", breaks = pretty_breaks(n = 10)) +
  labs(x = "Time", 
       y = "Number of pylons") +
  theme_custom() +
  theme(axis.ticks.x = element_line(color = "#cbcbcb"),
        panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
        panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
viz <- ggplotly(graph, tooltip = c("text")) |> 
  layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                 y = max(as.numeric(world_supports$amount), na.rm = TRUE),
                                 text = "Start of the MYG<br>project",   
                                 xref = "x", yref = "y", showarrow = FALSE,
                                 font = list(color = "#8B0000"),
                                 align = "left", xanchor = "left", yanchor = "top")))
viz
```


### Column {width="45%"}

```{r}
#| title: Evolutions base 100 in March 2025

# Préparation des données
sections_mars25 <- world_line |> 
  filter(as.Date(t) == "2025-03-01")
len_mars25 <- world_line |> 
  filter(as.Date(t) == "2025-03-01")
posts_mars25 <- world_substations |> 
  filter(as.Date(t) == "2025-03-01")
pylons_mars25 <- world_supports |> 
  filter(as.Date(t) == "2025-03-01")
table <- left_join(world_line |> rename(nb_sections = amount), 
                   world_substations |> rename(nb_posts = amount) |> select(-length), 
                   by = "t") |> 
  left_join(world_supports |> rename(nb_pylons = amount) |> select(-length),
            by = "t") |> 
  arrange(t) |> 
  # transformation des métriques en base 100 en mars 2025
  mutate(nb_sections_100_mars25 = nb_sections / sections_mars25$amount * 100,
         nb_sections_100_diff = round(nb_sections_100_mars25 - 100, 1),
         nb_sections_diff = nb_sections - sections_mars25$amount,
         len_100_mars25 = length / len_mars25$length * 100,
         len_100_diff = round(len_100_mars25 - 100, 1),
         len_diff = round(length - len_mars25$length, 0),
         nb_posts_100_mars25 = nb_posts / posts_mars25$amount * 100,
         nb_posts_100_diff = round(nb_posts_100_mars25 - 100, 1),
         nb_posts_diff = nb_posts - posts_mars25$amount,
         nb_pylons_100_mars25 = nb_pylons / pylons_mars25$amount * 100,
         nb_pylons_100_diff = round(nb_pylons_100_mars25 - 100, 1),
         nb_pylons_diff = nb_pylons - pylons_mars25$amount)
  #calcul de la valeur maximale en base 100 (pour placer "Start of MYG project")
max_mesures <- c(max(table$len_100_mars25, na.rm = TRUE),
                 max(table$nb_sections_100_mars25, na.rm = TRUE),
                 max(table$nb_posts_100_mars25, na.rm = TRUE),
                 max(table$nb_pylons_100_mars25, na.rm = TRUE))
max_max_100 <- max(max_mesures)

# Dataviz
graph <- table |> 
  mutate(t = as.Date(t)) |> 
  ggplot() +
  #ligne colorée jusq'à 100 pour line lenght
  geom_line(aes(x = t, y = len_100_mars25,group = 1,
                text = case_when(len_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(len_100_diff), "% (", 
                                                           format(as.integer(len_diff, 0), nsmall = 1, big.mark = ","), 
                                                           " km line lenght)"),
                                 len_100_diff == 0 ~ "Base 100",
                                 .default = paste0("Time : ", t, "\n↑ ", abs(len_100_diff), "% (+", 
                                                           format(as.integer(len_diff, 0), nsmall = 1, big.mark = ","), 
                                                           " km line lenght)")),
                color = "Line lenght"), size = .7) +
  #ligne colorée jusq'à 100 pour nb of sections
  geom_line(aes(x = t, y = nb_sections_100_mars25, group = 1, 
                text = case_when(nb_sections_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(nb_sections_100_diff), 
                                                              "% (", nb_sections_diff, " sections)"),
                                 nb_sections_100_diff == 0 ~ "Base 100",
                                 .default = paste0("Time : ", t, "\n↑ ", abs(nb_sections_100_diff), 
                                                              "% (+", nb_sections_diff, " sections)")),
                color = "Nb. of sections"), size = .7) +
  #ligne colorée jusq'à 100 pour nb of posts
  geom_line(aes(x = t, y = nb_posts_100_mars25, group = 1, 
                text = case_when(nb_posts_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(nb_posts_100_diff), 
                                                              "% (", nb_posts_diff, " posts)"),
                                 nb_posts_100_diff == 0 ~ "Base 100",
                                 .default = paste0("Time : ", t, "\n↑ ", abs(nb_posts_100_diff), 
                                                              "% (+", nb_posts_diff, " posts)")),
                color = "Nb. of posts"), size = .7) +
  #ligne colorée jusq'à 100 pour nb of pylons
  geom_line(aes(x = t, y = nb_pylons_100_mars25, group = 1, 
                text = case_when(nb_pylons_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(nb_pylons_100_diff), 
                                                              "% (", nb_pylons_diff, " pylons)"),
                                 nb_pylons_100_diff == 0 ~ "Base 100",
                                 .default = paste0("Time : ", t, "\n↑ ", abs(nb_pylons_100_diff), 
                                                              "% (+", nb_pylons_diff, " pylons)")),
                color = "Nb. of pylons"), size = .7) +
  #ligne pointillée au 1er mars 2025
  geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
  #mises en forme générales
  scale_x_date(date_labels = "%m-%Y", breaks = pretty_breaks(n = 10)) +
  scale_y_continuous(labels = scales::comma) +
  scale_color_manual(values = c("Nb. of sections" = "#ecc123", 
                                "Line lenght" = "#036d7a",
                                "Nb. of posts" = "#037a4c",
                                "Nb. of pylons" = "#6d0f06")) +
  labs(x = "Time", 
       y = "Base 100 in 03-2025", 
       color = "") + #title = "<span style='color: #037A4C;'>Line lenght</span> and <span style='color: #ECC229;'>number of sections</span> base 100 in March 2025 - Colombia"
  theme_custom() +
  theme(axis.ticks.x = element_line(color = "#cbcbcb"),
        legend.position = "top",
        panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
        panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb")) +
  guides(color = guide_legend(nrow = 2))
viz <- ggplotly(graph, tooltip = c("text")) |> 
  layout(legend = list(reverse = TRUE),
         annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                 y = max_max_100,
                                 text = "Start of the MYG<br>project",   
                                 xref = "x", yref = "y", showarrow = FALSE,
                                 font = list(color = "#8B0000"),
                                 align = "left", xanchor = "left", yanchor = "top")))
viz
```

### Column {width="25%"}

```{r}
#| title: Growth rate since March 2025

# Calcul du l'indicateur
  #line
growth_rate <- bind_cols(
  world_line |> 
    mutate(t = as.Date(t),
           length = as.numeric(length)) |> 
    filter(t == "2025-03-01" | t == max(t, na.rm = TRUE)) |> 
    mutate(growth_rate_amount = (amount - lag(amount)) / lag(amount),
           growth_rate_length = (length - lag(length)) / lag(length)) |> 
    select(growth_rate_amount, growth_rate_length) |> 
    na.omit(),
    #substations
  world_substations |> 
    mutate(t = as.Date(t)) |> 
    filter(t == "2025-03-01" | t == max(t, na.rm = TRUE)) |> 
    mutate(growth_rate_substation = (amount - lag(amount)) / lag(amount)) |> 
    select(growth_rate_substation) |> 
    na.omit(),
    # pylons
  world_supports |> 
    mutate(t = as.Date(t)) |> 
    filter(t == "2025-03-01" | t == max(t, na.rm = TRUE)) |> 
    mutate(growth_rate_supports = (amount - lag(amount)) / lag(amount)) |> 
    select(growth_rate_supports) |> 
    na.omit()
  ) |> 
  pivot_longer(cols = everything(), values_to = "Valeur", names_to = "Mesure", names_prefix = "growth_rate_") |> 
  mutate(Mesure = str_replace_all(Mesure, c("amount" = "Number of sections",
                                            "length" = "Line length",
                                            "substation" = "Number of posts",
                                            "supports" = "Number of pylons")))

# Plot
graph <- growth_rate |> 
  mutate(Mesure = fct_reorder(Mesure, Valeur)) |> 
  ggplot() +
  geom_segment(aes(x = 0, xend = Valeur, y = Mesure, yend = Mesure, color = Mesure), size = 1) +
  geom_point(aes(x = Valeur, y = Mesure, color = Mesure,
                 text = paste("+", round(Valeur*100, 2), "%")), size = 4) +
  labs(y = "", x = "Growth rate (%)") +
  scale_color_manual(values = c("Number of sections" = "#ecc123",
                                "Line length" = "#036d7a",
                                "Number of posts" = "#037a4c",
                                "Number of pylons" = "#6d0f06")) +
  scale_x_continuous(labels = scales::percent) +
  theme_custom() +
  theme(legend.position = "none", 
        panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
        panel.grid.major.y = ggplot2::element_blank()) 
viz <- ggplotly(graph, tooltip = c("text"))
viz
```


# Tables

```{r}
#| label: import data tables

line_lenght_country <- read_csv("../data/line_lenght_growth_country_data.csv") |> 
  #on remet growth % en numérique
  mutate(`Growth since 2025-01-01 (%)` = as.numeric(str_sub(`Growth since 2025-01-01 (%)`, 1, nchar(`Growth since 2025-01-01 (%)`)-1)) / 100)
```

## Row
### Column {width="60%"}

```{r}
#| title: Line length growth per country

# Préparation des données

  #chargement du dataset countrypops (codes des pays)
data("countrypops")
countrypops <- countrypops |> 
  distinct(country_name, country_code_2, country_code_3) |> 
  mutate(country_name = tolower(str_replace(country_name, "&", "and"))) 

  #jointure avec nos données pour récupérer le code de pays 
line_lenght_country_prep <- line_lenght_country |> 
  mutate(Country2 = tolower(Country), #minuscules pour otpimiser le match
         Country2 = case_match(Country2, #remplace à la main des pays non matchés
                               "people's republic of china" ~ "china",
                               "ivory coast" ~ "cote d'ivoire",
                               "state of palestine" ~ "palestine",
                               "democratic republic of the congo" ~ "congo (drc)",
                               "republic of the congo" ~ "congo (republic)",
                               "the bahamas" ~ "bahamas",
                               "the gambia" ~ "gambia",
                               "timor-leste" ~ "east timor",
                               "federated states of micronesia" ~ "micronesia",
                               "são tomé and príncipe" ~ "sao tome and principe",
                               "kingdom of the netherlands" ~ "netherlands",
                               .default = Country2)) |> 
  left_join(countrypops, by = c("Country2" = "country_name")) |> 
  na.omit() |> 
  #mise en forme df
  select(-Country2) |> 
  relocate(country_code_2, .before = Country) |> 
  rename(` ` = country_code_2)

# Affichage de la table
table_line_country <- line_lenght_country_prep |> 
  arrange(Country) |> 
  gt() |> 
  #drapeaux par pays
  fmt_flag(columns = ` `) |> 
  #format colonne en %
  fmt_percent(columns = `Growth since 2025-01-01 (%)`,
            decimals = 1, drop_trailing_zeros = TRUE,
            dec_mark = ",") |> 
  #coloration des évolutions en %
  data_color(columns = `Growth since 2025-01-01 (%)`,
             rows = `Growth since 2025-01-01 (%)` != 0,
             method = "bin",
             apply_to = "text",
             palette = c("#bf2f2f", "black", "#279f2b"),
             bins = c(-1, 0, 1)) |> 
  #coloration des évolutions en valeurs absolues
  data_color(columns = `Growth since 2025-01-01 (km)`,
             rows = `Growth since 2025-01-01 (km)` > 0,
             method = "numeric",
             palette = c("#FECF5D", "#279f2b"),
             bins = c(-Inf, 0, Inf),
             alpha = .8) |>
  data_color(columns = `Growth since 2025-01-01 (km)`,
             rows = `Growth since 2025-01-01 (km)` < 0,
             method = "numeric",
             palette = c("#bf2f2f", "#ffa500"),
             bins = c(-Inf, 0, Inf),
             alpha = .8) |>
  data_color(columns = `Growth since 2025-01-01 (km)`,
             rows = `Growth since 2025-01-01 (km)` == 0,
             method = "numeric",
             palette = c("grey80"),
             bins = c(-Inf, 0, Inf),
             alpha = .8) |>
  #alternance gris / blanc par ligne
  opt_row_striping() |> 
  #centrer les nombres
  tab_style(style = cell_text(align = "center"),
            locations = cells_body(is.numeric)) |> 
  #noms de pays en gras
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(Country)) |> 
  #mise en forme des noms de colonnes
  tab_style(style = cell_text(align = "left"),
            locations = cells_column_labels()) |> 
  #bordures en blanc
  tab_options(table_body.hlines.style = "solid",
              table_body.hlines.width = 10, 
              table_body.hlines.color = "white") |> 
  #taille colonnes
  cols_width(` ` ~ px(30)) |> 
  #intéractivité table
  opt_interactive(use_pagination = FALSE, use_search = TRUE) |> 
  #cache colonne
  cols_hide(country_code_3)
table_line_country
```

### Column {width="40%" .tabset}

```{r}
#| label: pre-run tables per continent
# Préparation des données

  #chargement des données des pays avec continent correspondant
continent_data <- read_delim("https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/world-administrative-boundaries/exports/csv/?delimiters=%3B&lang=fr&timezone=Europe%2FParis&use_labels=true", ";") |> 
  distinct(`ISO 3 territory code`, `Continent of the territory`) |> 
  clean_names()

  #jointure avec nos données pour récupérer le code de pays 
line_lenght_country_prep2 <- line_lenght_country_prep |> 
  left_join(continent_data, by = c("country_code_3" = "iso_3_territory_code")) |> 
    #agrégation par continent
  summarise(nb_pays = n(),
            mean_power_line = round(mean(`Power line length (km) 2025-07-01`), 0),
            min_power_line = min(`Power line length (km) 2025-07-01`),
            max_power_line = max(`Power line length (km) 2025-07-01`),
            sum_power_line = sum(`Power line length (km) 2025-07-01`),
            min_growth_percent = min(`Growth since 2025-01-01 (%)`),
            max_growth_percent = max(`Growth since 2025-01-01 (%)`),
            mean_growth_percent = mean(`Growth since 2025-01-01 (%)`),
            min_growth_km = min(`Growth since 2025-01-01 (km)`),
            max_growth_km = max(`Growth since 2025-01-01 (km)`),
            mean_growth_km = mean(`Growth since 2025-01-01 (km)`),
            sum_growth_km = sum(`Growth since 2025-01-01 (km)`),
            Continent = paste(Country, collapse = ", "),
            code_pays = paste(` `, collapse = ","),
            .by = continent_of_the_territory) |> 
      #mise en forme des stats
  mutate(across(where(is.numeric) & !all_of(c("mean_power_line", "mean_growth_percent", 
                                              "mean_growth_km", "min_growth_percent", "max_growth_percent")), 
                ~ format(as.integer(., 0), nsmall = 1, big.mark = "."))) |> 
  #préparation liste déroulante de spays par continent
  mutate(Continent_detail = ifelse(is.na(Continent), NA_character_,
                             paste0("<details><summary>", continent_of_the_territory, "</summary>", Continent, "</details>")))

```

```{r}
#| title: Power line length
      ###----- Power line length (km)

# Affichage de la table
table_line_continent_power <- line_lenght_country_prep2 |> 
  #sélection des variables à afficher
  select(nb_pays, ends_with("power_line"), Continent, Continent_detail) |> 
  #dernière mise en forme avant table
  rename(`Number of countries` = nb_pays) |> 
  arrange(Continent_detail) |> 
  relocate(Continent) |> 
  #table
  gt() |> 
  #liste interactive des pays par continent
  text_transform(
    locations = cells_body(columns = vars(Continent)),
    fn = function(x) {
      # on renvoie la colonne Detail_html ligne par ligne, enveloppée par html()
      lapply(seq_along(x), function(i) html(line_lenght_country_prep2$Continent_detail[i]))
    }) |> 
  cols_hide(Continent_detail) |> 
  #coloration des moyennes
  data_color(columns = mean_power_line,
             colors = scales::col_numeric(palette = c("#b3d3d7", "#036d7a"), domain = NULL)) |> 
  #groupe de statistiques
  tab_spanner(label = 'Power line length (km) 2025-07-01',
              columns = c(mean_power_line, min_power_line, max_power_line, sum_power_line)) |> 
  cols_label(sum_power_line = "Sum", min_power_line = "Min", 
             max_power_line = "Max", mean_power_line = "Mean") |> 
  #alternance gris / blanc par ligne
  opt_row_striping() |> 
  #centrer les nombres
  tab_style(style = cell_text(align = "center"),
            locations = cells_body(-Continent)) |> 
  #lighter les nombres sauf nb_countries
  tab_style(style = cell_text(weight = "lighter"),
            locations = cells_body(-c(Continent, `Number of countries`))) |> 
  #noms de continent en gras
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(Continent)) |> 
  #mise en forme des noms de colonnes
  tab_style(style = list(cell_text(align = "center")),
            locations = cells_column_labels()) |> 
  #styles de la table
  opt_stylize(style = 1, color = 'gray') |> 
  #bordures en blanc
  tab_options(table_body.hlines.style = "solid",
              table_body.hlines.width = 2, 
              table_body.hlines.color = "white",
              table_body.border.top.color = "#6b6b6b",
              table_body.border.top.style = "solid",
              table_body.border.top.width = 2.4)
table_line_continent_power
```

```{r}
#| title: Line length growth (%)
      ###----- Growth since 2025-01-01 (%)

# Affichage de la table
table_line_continent_growth_percent <- line_lenght_country_prep2 |> 
  #sélection des variables à afficher
  select(nb_pays, ends_with("growth_percent"), Continent, Continent_detail) |> 
  #dernière mise en forme avant table
  rename(`Number of countries` = nb_pays) |> 
  arrange(Continent_detail) |> 
  relocate(Continent) |> 
  #table
  gt() |> 
  #liste interactive des pays par continent
  text_transform(
    locations = cells_body(columns = vars(Continent)),
    fn = function(x) {
      # on renvoie la colonne Detail_html ligne par ligne, enveloppée par html()
      lapply(seq_along(x), function(i) html(line_lenght_country_prep2$Continent_detail[i]))
    }) |> 
  cols_hide(Continent_detail) |> 
  #coloration des moyennes
  data_color(columns = mean_growth_percent,
             colors = scales::col_numeric(palette = c("#b3d3d7", "#036d7a"), domain = NULL)) |> 
  #groupe de statistiques
  tab_spanner(label = 'Growth since 2025-01-01 (%)',
              columns = c(mean_growth_percent, min_growth_percent, max_growth_percent)) |> 
  cols_label(min_growth_percent = "Min", max_growth_percent = "Max", mean_growth_percent = "Mean") |> 
    #alternance gris / blanc par ligne
  opt_row_striping() |> 
  #centrer les nombres
  tab_style(style = cell_text(align = "center"),
            locations = cells_body(-Continent)) |> 
  #lighter les nombres sauf nb_countries
  tab_style(style = cell_text(weight = "lighter"),
            locations = cells_body(-c(Continent, `Number of countries`))) |> 
  #noms de continent en gras
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(Continent)) |> 
  #mise en forme des noms de colonnes
  tab_style(style = list(cell_text(align = "center")),
            locations = cells_column_labels()) |> 
  #styles de la table
  opt_stylize(style = 1, color = 'gray') |> 
  #bordures en blanc
  tab_options(table_body.hlines.style = "solid",
              table_body.hlines.width = 2, 
              table_body.hlines.color = "white",
              table_body.border.top.color = "#6b6b6b",
              table_body.border.top.style = "solid",
              table_body.border.top.width = 2.4) |> 
  #format colonne en %
  fmt_percent(columns = c(min_growth_percent, max_growth_percent, mean_growth_percent),
            decimals = 2, drop_trailing_zeros = TRUE,
            dec_mark = ",")
table_line_continent_growth_percent
```

```{r}
#| title: Line length growth (km)
      ###----- Growth since 2025-01-01 (km)

# Affichage de la table
table_line_continent_growth_km <- line_lenght_country_prep2 |> 
  #sélection des variables à afficher
  select(nb_pays, ends_with("growth_km"), Continent, Continent_detail) |> 
  #dernière mise en forme avant table
  rename(`Number of countries` = nb_pays) |> 
  arrange(Continent_detail) |> 
  relocate(Continent) |> 
  mutate(mean_growth_km = round(mean_growth_km, 0)) |> 
  #table
  gt() |> 
  #liste interactive des pays par continent
  text_transform(
    locations = cells_body(columns = vars(Continent)),
    fn = function(x) {
      # on renvoie la colonne Detail_html ligne par ligne, enveloppée par html()
      lapply(seq_along(x), function(i) html(line_lenght_country_prep2$Continent_detail[i]))
    }) |> 
  cols_hide(Continent_detail) |> 
  #coloration des moyennes
  data_color(columns = mean_growth_km,
             colors = scales::col_numeric(palette = c("#b3d3d7", "#036d7a"), domain = NULL)) |> 
  #groupe de statistiques
  tab_spanner(label = 'Growth since 2025-01-01 (km)',
              columns = c(mean_growth_km, min_growth_km, max_growth_km, sum_growth_km)) |> 
  cols_label(min_growth_km = "Min", max_growth_km = "Max", mean_growth_km = "Mean", sum_growth_km = "Sum") |> 
    #alternance gris / blanc par ligne
  opt_row_striping() |> 
  #centrer les nombres
  tab_style(style = cell_text(align = "center"),
            locations = cells_body(-Continent)) |> 
  #lighter les nombres sauf nb_countries
  tab_style(style = cell_text(weight = "lighter"),
            locations = cells_body(-c(Continent, `Number of countries`))) |> 
  #noms de continent en gras
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(Continent)) |> 
  #mise en forme des noms de colonnes
  tab_style(style = list(cell_text(align = "center")),
            locations = cells_column_labels()) |> 
  #styles de la table
  opt_stylize(style = 1, color = 'gray') |> 
  #bordures en blanc
  tab_options(table_body.hlines.style = "solid",
              table_body.hlines.width = 2, 
              table_body.hlines.color = "white",
              table_body.border.top.color = "#6b6b6b",
              table_body.border.top.style = "solid",
              table_body.border.top.width = 2.4)
table_line_continent_growth_km
```





