---
title: "Progress of the MapYourGrid project"
format: 
  dashboard:
    nav-buttons: [github]
    github: https://github.com/datactivist/OET_dataviz
logo: "https://raw.githubusercontent.com/open-energy-transition/MapYourGrid/main/docs/images/logos/MapYourGrid-logo.png"
theme: [sandstone, custom.scss]
fig-width: 10
fig-asp: 0.3
resources: 
  - "leaflet.providers"
server: shiny
---

```{r}
#| label: chargement des packages et thème graphs
#| context: setup
#| message: false

library(tidyverse)
library(jsonlite)
library(plotly)
library(scales)
library(gt)
library(gtExtras)
library(janitor)
library(sf)
library(leaflet)
library(leafem)
library(leaflet.extras2)
library(shiny)
library(rvest)
library(glue)
library(DT)
library(bslib)
library(bsicons)

#Thème pour les graphiques
theme_custom <- function (){
    ggplot2::theme(plot.title = ggplot2::element_text(size = 21, face = "bold", color = "#222222"), 
        plot.subtitle = ggplot2::element_text(size = 18, face = "italic", margin = ggplot2::margin(0, 0, 9, 0)), 
        plot.caption = ggplot2::element_text(size = 18, margin = ggplot2::margin(9, 0, 9, 0)), 
        plot.title.position = "plot",
        plot.caption.position = "plot",
        legend.title = ggplot2::element_text( size = 18, color = "#222222"), 
        legend.position = "top", 
        legend.text.align = 0, 
        legend.background = ggplot2::element_blank(),
        legend.key = ggplot2::element_blank(),
        legend.text = ggplot2::element_text( size = 18,color = "#222222"), 
        axis.text = ggplot2::element_text( size = 15,color = "#222222"), 
        axis.text.x = ggplot2::element_text(margin = ggplot2::margin(5,b = 10)), 
        axis.title = ggplot2::element_text( size = 18,color = "#222222"),
        axis.ticks = ggplot2::element_blank(),
        axis.line = ggplot2::element_blank(), 
        panel.grid.minor = ggplot2::element_blank(),
        panel.grid.major.y = ggplot2::element_line(color = "#cbcbcb"),
        panel.grid.major.x = ggplot2::element_blank(), 
        panel.background = ggplot2::element_blank(),
        strip.background = ggplot2::element_rect(fill = "white"),
        strip.text = ggplot2::element_text(size = 22, hjust = 0, face = "bold"),
        text = element_text(family = "Open Sans"))
}
```

```{r}
#| label: import data world to get last update
last_date <- fromJSON("https://mapyourgrid.infos-reseaux.com/projects/2025-01_lines/counts")$data |> 
  arrange(t) |> 
  slice_tail(n = 1)
```

# {.sidebar}


The data displayed on this dashboard was last updated on **`r format(as.Date(last_date$t, format = "%Y-%m-%dT%H:%M:%S"),"%b %d, %Y")`**.

------------------------------------------------------------------------


Select a country to view its indicators. By default, **global indicators** are shown.

```{r}
#| label: scraping table wiki relations / pays

df_line <- read_csv("../data/api/data_line_all.csv")

# Bouton de sélection du pays
selectInput('nom_pays', 'Country', unique(df_line$Pays), selected = "World (default)")
```



# Indicators

```{r}
#| context: server
#| label: get data and stats from selected country

# Line
value_world_line <- reactive({
  df_line <- read_csv("../data/api/data_line_all.csv")
  df_line |> 
    filter(Pays == input$nom_pays)
})
  #length
value_world_line_last <- reactive({
  value_world_line() |> 
    arrange(t) |> 
    slice_tail(n = 1) |> 
    mutate(length = ifelse(length > 1000000000,
                           paste(format(round(as.numeric(length) / 1e6, 0), trim = TRUE), "M"),
                           format(as.integer(length, 0), nsmall = 1, big.mark = ",")))
})
  #sections
value_world_sections_last <- reactive({
  value_world_line() |> 
    arrange(t) |> 
    slice_tail(n = 1) |> 
    mutate(amount = ifelse(amount > 1000000000,
                           paste(format(round(as.numeric(amount) / 1e6, 0), trim = TRUE), "M"),
                           format(as.integer(amount, 0), nsmall = 1, big.mark = ",")))
})
# Substations
value_world_substations <- reactive({
  df_substations <- read_csv("../data/api/data_substations_all.csv")
  df_substations |> 
    filter(Pays == input$nom_pays)
})
value_world_substations_last <- reactive({
  value_world_substations() |> 
    arrange(t) |> 
    slice_tail(n = 1) |> 
    mutate(amount = ifelse(amount > 1000000000,
                           paste(format(round(as.numeric(amount) / 1e6, 0), trim = TRUE), "M"),
                           format(as.integer(amount, 0), nsmall = 1, big.mark = ",")))
})
# Pylons (supports)
value_world_supports <- reactive({
  df_supports <- read_csv("../data/api/data_supports_all.csv")
  df_supports |> 
    filter(Pays == input$nom_pays)
})
value_world_supports_last <- reactive({
  value_world_supports() |> 
    arrange(t) |> 
    slice_tail(n = 1) |> 
    mutate(amount = ifelse(amount > 1000000000,
                           paste(format(round(as.numeric(amount) / 1e6, 0), trim = TRUE), "M"),
                           format(as.integer(amount, 0), nsmall = 1, big.mark = ",")))
})
```


## Row {height="20%"}


```{r}
value_box(
  id = "card1",
  title = "Line lenght (km)",
  theme = value_box_theme(bg = "#4e98a1", fg = "white"),
  value = textOutput("n1")
)
```

```{r}
value_box(
  id = "card2",
  title = "Number of sections",
  theme = value_box_theme(bg = "#f1d365", fg = "#4f4e4d"),
  value = textOutput("n2")
)
```

```{r}
value_box(
  id = "card3",
  title = "Number of substations",
  theme = value_box_theme(bg = "#4ea181", fg = "white"),
  value = textOutput("n3")
)
```

```{r}
value_box(
  id = "card4",
  title = "Number of pylons",
  theme = value_box_theme(bg = "#985750", fg = "white"),
  value = textOutput("n4")
)
```

```{r}
#| context: server

output$n1 <- renderText({
  value_world_line_last()$length
})
output$n2 <- renderText({
  value_world_sections_last()$amount
})
output$n3 <- renderText({
  value_world_substations_last()$amount
})
output$n4 <- renderText({
  value_world_supports_last()$amount
})
```


## Row {height="80%"}

### Column {width="30%" .tabset}


```{r}
#| title: Line length
plotlyOutput('plot1')
```

```{r}
#| context: server

# Plot line length
output$plot1 <- renderPlotly({
  #plot depending on selected country
  graph <- value_world_line() |> 
    mutate(t = as.Date(t),
           length = length / 1000) |> 
    ggplot() +
    geom_line(aes(x = t, y = length, group = 1,
                  text = paste0("Time : ", t, "\nLine lenght : ", format(as.integer(length, 0), nsmall = 1, big.mark = ","), "m km")),
              color = "#036D7A", size = .7) +
    geom_point(aes(x = t, y = length, group = 1,
                  text = paste0("Time : ", t, "\nLine lenght : ", format(as.integer(length, 0), nsmall = 1, big.mark = ","), "m km")),
              color = "#036D7A", size = 1) +
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    scale_y_continuous(labels = scales::comma) +
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    labs(x = "Time", 
         y = "Line lenght (m km)") +
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
  #interactive graph
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max(as.numeric(value_world_line()$length)/1000, na.rm = TRUE),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```


```{r}
#| title: Sections
plotlyOutput('plot2')
```

```{r}
#| context: server

# Plot line length
output$plot2 <- renderPlotly({
  #plot depending on selected country
  graph <- value_world_line() |> 
    mutate(t = as.Date(t)) |> 
    ggplot() +
    geom_line(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of sections : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#ECC229", size = .7) +
    geom_point(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of sections : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#ECC229", size = 1) +
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    scale_y_continuous(labels = scales::comma) +
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    labs(x = "Time", 
         y = "Sections (nb.)") +
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
  #interactive graph
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max(value_world_line()$amount, na.rm = TRUE),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```


```{r}
#| title: substations
plotlyOutput('plot3')
```

```{r}
#| context: server

# Plot line length
output$plot3 <- renderPlotly({
  graph <- value_world_substations() |> 
    mutate(t = as.Date(t)) |> 
  #plot depending on selected country
    ggplot() +
    geom_line(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of substations : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#037a4c", size = .7) +
    geom_point(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of substations : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#037a4c", size = 1) +
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    scale_y_continuous(labels = scales::comma) +
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    labs(x = "Time", 
         y = "Number of substations") +
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
  #interactive graph
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max(as.numeric(value_world_substations()$amount), na.rm = TRUE),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```


```{r}
#| title: Pylons
plotlyOutput('plot4')
```

```{r}
#| context: server

# Plot line length
output$plot4 <- renderPlotly({
  #plot depending on selected country
  graph <- value_world_supports() |> 
    mutate(t = as.Date(t)) |> 
    ggplot() +
    geom_line(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of pylons : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#985750", size = .7) +
    geom_point(aes(x = t, y = amount, group = 1,
                  text = paste0("Time : ", t, "\nNumber of pylons : ", format(as.integer(amount, 0), nsmall = 1, big.mark = ","))),
              color = "#985750", size = 1) +
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    scale_y_continuous(labels = scales::comma) +
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    labs(x = "Time", 
         y = "Number of pylons") +
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb"))
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max(as.numeric(value_world_supports()$amount), na.rm = TRUE),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```



### Column {width="45%"}

```{r}
#| context: server
#| label: prepare data evolution 100 graph

# Préparation des données
sections_mars25 <- reactive({
  value_world_line() |> 
    filter(as.Date(t) == "2025-03-01")
})
len_mars25 <- reactive({
  value_world_line() |> 
    filter(as.Date(t) == "2025-03-01")
})
substations_mars25 <- reactive({
  value_world_substations() |> 
    filter(as.Date(t) == "2025-03-01")
})
pylons_mars25 <- reactive({
  value_world_supports() |> 
    filter(as.Date(t) == "2025-03-01")
})
table <- reactive({
  left_join(value_world_line() |> rename(nb_sections = amount), 
            value_world_substations() |> rename(nb_substations = amount) |> select(-length), 
            by = "t") |> 
  left_join(value_world_supports() |> rename(nb_pylons = amount) |> select(-length),
            by = "t") |> 
  arrange(t) |> 
  # transformation des métriques en base 100 en mars 2025
  mutate(nb_sections_100_mars25 = nb_sections / sections_mars25()$amount * 100,
         nb_sections_100_diff = round(nb_sections_100_mars25 - 100, 1),
         nb_sections_diff = nb_sections - sections_mars25()$amount,
         len_100_mars25 = length / len_mars25()$length * 100,
         len_100_diff = round(len_100_mars25 - 100, 1),
         len_diff = round(length - len_mars25()$length, 0),
         nb_substations_100_mars25 = nb_substations / substations_mars25()$amount * 100,
         nb_substations_100_diff = round(nb_substations_100_mars25 - 100, 1),
         nb_substations_diff = nb_substations - substations_mars25()$amount,
         nb_pylons_100_mars25 = nb_pylons / pylons_mars25()$amount * 100,
         nb_pylons_100_diff = round(nb_pylons_100_mars25 - 100, 1),
         nb_pylons_diff = nb_pylons - pylons_mars25()$amount)
})
  #calcul de la valeur maximale en base 100 (pour placer "Start of MYG project")
max_mesures <- reactive({
  c(max(table()$len_100_mars25, na.rm = TRUE),
    max(table()$nb_sections_100_mars25, na.rm = TRUE),
    max(table()$nb_substations_100_mars25, na.rm = TRUE),
    max(table()$nb_pylons_100_mars25, na.rm = TRUE))
})
max_max_100 <- reactive({
  max(max_mesures())
})
```


```{r}
#| title: Evolutions base 100 in March 2025
plotlyOutput('plot5')
```

```{r}
#| context: server

# Plot line length
output$plot5 <- renderPlotly({

  #plot depending on selected country
  graph <- table() |> 
    mutate(t = as.Date(t)) |> 
    ggplot() +
    #ligne colorée jusqu'à 100 pour line lenght
    geom_line(aes(x = t, y = len_100_mars25,group = 1,
                  text = case_when(len_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(len_100_diff), "% (", 
                                                             format(as.integer(len_diff, 0), nsmall = 1, big.mark = ","), 
                                                             " km line lenght)"),
                                   len_100_diff == 0 ~ "Base 100",
                                   .default = paste0("Time : ", t, "\n↑ ", abs(len_100_diff), "% (+", 
                                                             format(as.integer(len_diff, 0), nsmall = 1, big.mark = ","), 
                                                             " km line lenght)")),
                  color = "Line lenght"), size = .7) +
    #ligne colorée jusqu'à 100 pour nb of sections
    geom_line(aes(x = t, y = nb_sections_100_mars25, group = 1, 
                  text = case_when(nb_sections_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(nb_sections_100_diff), 
                                                                "% (", nb_sections_diff, " sections)"),
                                   nb_sections_100_diff == 0 ~ "Base 100",
                                   .default = paste0("Time : ", t, "\n↑ ", abs(nb_sections_100_diff), 
                                                                "% (+", nb_sections_diff, " sections)")),
                  color = "Sections"), size = .7) +
    #ligne colorée jusqu'à 100 pour nb of substations
    geom_line(aes(x = t, y = nb_substations_100_mars25, group = 1, 
                  text = case_when(nb_substations_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(nb_substations_100_diff), 
                                                                "% (", nb_substations_diff, " substations)"),
                                   nb_substations_100_diff == 0 ~ "Base 100",
                                   .default = paste0("Time : ", t, "\n↑ ", abs(nb_substations_100_diff), 
                                                                "% (+", nb_substations_diff, " substations)")),
                  color = "Substations"), size = .7) +
    #ligne colorée jusqu'à 100 pour nb of pylons
    geom_line(aes(x = t, y = nb_pylons_100_mars25, group = 1, 
                  text = case_when(nb_pylons_100_diff < 0 ~ paste0("Time : ", t, "\n↓ ", abs(nb_pylons_100_diff), 
                                                                "% (", nb_pylons_diff, " pylons)"),
                                   nb_pylons_100_diff == 0 ~ "Base 100",
                                   .default = paste0("Time : ", t, "\n↑ ", abs(nb_pylons_100_diff), 
                                                                "% (+", nb_pylons_diff, " pylons)")),
                  color = "Pylons"), size = .7) +
    #ligne pointillée au 1er mars 2025
    geom_vline(xintercept = as.Date("2025-03-01"), linetype = 2, color = "red4") +
    #mises en forme générales
    scale_x_date(date_labels = "%m-%y", breaks = pretty_breaks(n = 10)) +
    scale_y_continuous(labels = scales::comma) +
    scale_color_manual(values = c("Sections" = "#ecc123", 
                                  "Line lenght" = "#036d7a",
                                  "Substations" = "#037a4c",
                                  "Pylons" = "#6d0f06")) +
    labs(x = "Time", 
         y = "Base 100 in 03-2025", 
         color = "") + #title = "<span style='color: #037A4C;'>Line lenght</span> and <span style='color: #ECC229;'>number of sections</span> base 100 in March 2025 - Colombia"
    theme_custom() +
    theme(axis.ticks.x = element_line(color = "#cbcbcb"),
          legend.position = "top",
          panel.grid.major.x = ggplot2::element_line(color = "#cbcbcb"),
          panel.grid.minor.x = ggplot2::element_line(color = "#cbcbcb")) +
    guides(color = guide_legend(nrow = 2))
  #interactive graph
  viz <- ggplotly(graph, tooltip = c("text")) |> 
    layout(legend = list(reverse = TRUE),
           annotations = list(list(x = as.numeric(as.Date("2025-03-10")),
                                   y = max_max_100(),
                                   text = "Start of the MYG<br>project",   
                                   xref = "x", yref = "y", showarrow = FALSE,
                                   font = list(color = "#8B0000"),
                                   align = "left", xanchor = "left", yanchor = "top")))
  viz
})
```


# Tables

## Row {height="20%"}

```{r}
tableOutput('data')
```

```{r}
#| context: server
 

output$data <- renderTable({
  value_world_line_last()
})

```

